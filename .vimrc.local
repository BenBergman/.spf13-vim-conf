UnBundle 'airblade/vim-gitgutter'
UnBundle 'justinmk/vim-sneak'

" Key inversion was causing issues with me through PuTTY, so disabled for now
"" Invert number/symbol keys while in insert mode {{{
"" You aren't hard coding your variables, are you?
"
"inoremap 1 !
"inoremap 2 @
"inoremap 3 #
"inoremap 4 $
"inoremap 5 %
"inoremap 6 ^
"inoremap 7 &
"inoremap 8 *
"inoremap 9 (
"inoremap 0 )
"
"inoremap ! 1
"inoremap @ 2
"inoremap # 3
"inoremap $ 4
"inoremap % 5
"inoremap ^ 6
"inoremap & 7
"inoremap * 8
"inoremap ( 9
"inoremap ) 0
"
"" }}}

filetype on

let CoVim_default_name = "Ben"

let g:airline_theme = "solarized"
let g:airline#extensions#hunks#non_zero_only = 1

" Fixes bug in vim/zsh that was exposed by gitgutter realtime mode
set shell=$SHELL

" Fixes bug where Tagbar causes Airline to break
au VimEnter * AirlineToggle
au VimEnter * AirlineToggle

map <C-c> <Esc>

nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l

if mapcheck('<C-e>') != ''
	unmap <C-e>
endif
map <C-f> :NERDTreeToggle<CR>:NERDTreeMirror<CR>

silent! iunmap <expr> <Tab>

vnoremap <leader>ld :Linediff<CR>
nnoremap <leader>ld V:Linediff<CR>
noremap <leader>ldr :LinediffReset<CR>

" Takes whatever was last searched for and does
" a find and replace for what you type next
" Useful with the * command
map <leader>r <Esc>:%s/\(<C-r>/\)//g<left><left>
map <leader>R <Esc>:%s/\(<C-r>/\)//gc<left><left><left>

nnoremap gb :ls<cr>:buffer
let g:bufferline_solo_highlight = 1

" Try to fix <CR> when completion menu is displayed
"inoremap <expr><CR> "\<CR>"

let g:autoclose_vim_commentmode = 1

let g:multi_cursor_exit_from_insert_mode = 0
let g:multi_cursor_exit_from_visual_mode = 0

" This might be better suited for a .syntastic_cpp_config per project
let g:syntastic_cpp_include_dirs=['/usr/msp430/include','/opt/energia/hardware/msp430/cores/msp430']
let g:syntastic_cpp_compiler_options=' -mmcu=msp430g2553'

" Line wrapping
set wrap
set linebreak   " break on characters in breakat
set nolist      " allow linebreak to work
if &encoding == 'utf-8'
	let &showbreak="→ "
	
	" Powerline glyphs
	digraphs bp 57504 " 
	digraphs lp 57505 " 
	digraphs rp 57506 " 
	digraphs <P 57520 " 
	digraphs <p 57521 " 
	digraphs >P 57522 " 
	digraphs >p 57523 " 
endif

set colorcolumn=80

set virtualedit=  " remove 'onemore' option

set foldlevelstart=99

set modeline

set softtabstop=4
set shiftwidth=4
set tabstop=4
set noexpandtab

" Command to convert leading spaces into tabs (arg is the number of existing
" spaces per tab character)
" From http://vim.wikia.com/wiki/Super_retab
command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g

if !has('gui_running')
	let g:indent_guides_enable_on_vim_startup=0
endif
set guifont=Source\ Code\ Pro\ for\ Powerline\ Medium\ 10
set guioptions-=rl

map <leader>vq :VimuxCloseRunner<CR>


" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>


let nasl_space_errors = 1
autocmd BufNewFile,BufRead *.audit set syntax=xml
autocmd BufNewFile,BufRead *.nasl set filetype=nasl
autocmd BufNewFile,BufRead *.inc set filetype=nasl
autocmd BufNewFile,BufRead *.inc set indentexpr=
autocmd FileType nasl setlocal shiftwidth=2 tabstop=2 expandtab softtabstop=2 colorcolumn=70
autocmd FileType nasl set commentstring=#\ %s

let g:tagbar_type_nasl = {
	\ 'ctagstype' : 'nasl',
	\ 'kinds'     : [
		\ 'f:functions',
		\ 'v:variables',
		\ 'g:globals',
	\ ]
\ }

let g:syntastic_nasl_checkers = ['nasl_parse', 'nasl']

map <leader>rv :call VimuxRunCommand("clear; validate-plugin -s -s " . bufname("%"))<CR>

function! NamedArgsExpand()
	:s/,\s*/,/g
	?(
	:s/(\s*/(/
	/)
	:s/\s*)/)/
	normal V%=
	/:
	:Tabularize /:
endfunction
autocmd FileType nasl map <silent> <leader>ne :call NamedArgsExpand()<CR>

function! DisplayVar(var)
	call setline(line('.'), substitute(getline('.'), a:var, "display('".a:var.": ', ".a:var.", '".'\\n'."');", 'g'))
endfunction
autocmd FileType nasl map <silent> <leader>nd y :call DisplayVar('<C-r>"')<CR>

function! MakeTiny(url)
	let result = system("mktiny " . a:url)
	let result = substitute(result, '[^a-zA-Z0-9:/.?]', '', 'g')
	call setline(line('.'), substitute(getline('.'), a:url, result, 'g'))
endfunction
vmap mt y :call MakeTiny('<C-r>"')<CR>
